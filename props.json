[
    {
        "name": "maximumLineLength",
        "alt" : [
            {
                "test": "jscs.allowComments",
                "message1": "Comments are allowed to break this rule. "
            },
            {
                "test": "!jscs.allowComments && jscs.allowUrlComments",
                "message1": "Comments with long Urls are allowed to break this rule. "
            },
            {
                "test": "jscs.allowRegex",
                "message2": "Regular expression literals are allowed to break this rule. "
            }
        ]
    },
    {
        "name": "requireCamelCaseOrUpperCaseIdentifiers",
        "message": "Identifiers must be camelCased or UPPERCASE_WITH_UNDERSCORES",
        "right": "var camelCase = 0;\rvar CamelCase = 1;\rvar _camelWithUnderscore = 2;\rvar UPPER_CASE = 3;",
        "wrong": "var lower_case = 0;\rvar Mixed_case = 2;\rvar mixed_Case = 3;"
    },
    {
        "name": "requireCapitalizedConstructors",
        "message": " All constructors except for <code>this</code> must be capitalized.",
        "right": "var x = new A();\rvar y = new this();",
        "wrong": "var x = new a();"
    },
    {
        "name": "requireCommaBeforeLineBreak",
        "message": "When a list is split over multiple lines, the comma separator must come at the end of a line.",
        "right":"var x = {\r    one: 1,\r    two: 2,\r    three: 3\r};",
        "wrong":"var x = {\r    one: 1\r    ,two: 2\r    ,three: 3\r};"
    },
    {
        "name": "requireCurlyBraces",
        "message": "Curly braces are required after the following statements:",
        "right": "if (condition) {\r    someThing();\r}",
        "wrong": "if (condition) someThing();"
    },
    {
        "name": "requireDollarBeforejQueryAssignment",
        "alt": [
            {
                "test" : "jscs === \"ignoreProperties\"",
                "message": "Use $ to begin a variable name which is a jQuery assignment. This does not apply to object properties.",
                "right": "var $x = $(\".foo\");\rvar y = {\r    x = $(\".foo\")\r};",
                "wrong": "var y = $(\".foo\");"
            },
            {
                "test" : "jscs === true",
                "message": "Use $ to begin a variable or object property name which is a jQuery assignment.",
                "right": "var $x = $(\".foo\");\rvar y = {\r    $x = $(\".foo\")\r};",
                "wrong": "var y = $(\".foo\");\rvar y = {\r    x = $(\".foo\")\r};"
            }
        ]
    },
    {
        "name": "requireMultipleVarDecl",
        "alt": [
            {
                "test": "jscs === true",
                "message": "Multiple consecutive <code>var</code> declarations must be declared as a comma-separated list with a single <code>var</code>. ",
                "right": "var x = 1, y = 2;\rsomeOtherCode();\rvar a = 3,\r    b = 4;",
                "wrong": "var x = 1;\rvar y = 2;\rsomeOtherCode();"
            },
            {
                "test": "jscs === \"onevar\"",
                "message": "Only one <code>var</code> statement is allowed per function scope. ",
                "right": "var x = 1, y = 2,\r    a,\r    b;\rsomeOtherCode();\ra = 3;\rb = 4;",
                "wrong": "var x = 1, y = 2;\rsomeOtherCode();\rvar a = 3,\r    b = 4;"
            }
        ]
    },
    {
        "name": "requireOperatorBeforeLineBreak",
        "message": "When expressions involving binary operators are split between lines, the operator must appear before the line break.",
        "right": "var x = y ?\r        1 : 2;",
        "wrong": "var x = y\r        ? 1 : 2;"
    },
    {
        "name": "requireSpaceBeforeBinaryOperators",
        "message": "Do not allow 'sticky' binary operators. The following operators must be preceeded by a space:",
        "right": "x != y;",
        "wrong": "x!= y;"
    },
    {
        "name": "validateIndentation",
        "alt": [
            {
                "test": "jscs === \"\t\"",
                "message": "Switch and block statements must be indented with a TAB (\\t) character. ",
                "right": "if(a) {\r    b = c; \\\\ line is indented with \\t\r}",
                "wrong": "if(a) {\r    b = c; \\\\ line is indented with spaces\r}"
            },
            {
                "test": "jscs.includeEmptyLines",
                "message1": "Empty lines must also be indented in the same manner. "
            }
        ]
    },
    {
        "name": "validateQuoteMarks",
        "alt": [
            {
                "test": "jscs.mark === '\"'" ,
                "message": "Strings must be quoted with double-quotes. ",
                "right": "var s = \"A String Value\";",
                "right1":"\rvar s = 'A String containing \"quote mark\"';",
                "wrong": "var s = 'A String Value';"
            },
            {
                "test": "jscs.mark === \"'\"" ,
                "message": "Strings must be quoted with single-quote (apostrophe). ",
                "right": "var s = 'A String Value';",
                "right1": "\rvar s = \"A String containing 'quote mark'\";",
                "wrong": "var s = \"A String Value\";"
            },
            {
                "test": "jscs.mark === true" ,
                "message": "Strings must be quoted with the quote first encountered in the source code. ",
                "example": "var s = \"First quote mark is double\";",
                "right": "var s = \"A String Value\";",
                "right1": "\rvar s = 'A String containing \"quote mark\"';",
                "wrong": "var s = 'A String Value';"
            },
            {
                "test": "jscs.escape",
                "message1": "The \"other\" quote mark may be used only in cases where it is necessary in order to avoid having to escape. "
            },
            {
                "test": "!jscs.escape",
                "right1": ""
            }
        ]
    }
]
